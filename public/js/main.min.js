"use strict";
if (typeof loaders === "undefined" || typeof transitions === "undefined" || typeof config === "undefined") {
  throw new Error("Config is not loaded!")
}
var content;
var current = 0;
var standby = false;
var lastStandby = -1;
var standbyContent = null;
var cycles = 0;
function nextContent() {
  var k = content[current];
  var h;
  var c = $("#content-" + current);
  var n = current;
  current += 1;
  if (current >= content.length) {
    current = 0;
    cycles += 1;
    if (standby) {
      for (var f = lastStandby; f < content.length && f < standbyContent.length; f++) {
        var o = standbyContent[f];
        var b = loaders[o.type].preLoad(o);
        var a = $("#content-" + f);
        a.empty();
        a.append(b);
        content[f] = o;
        console.log("Replaced " + f);
        lastStandby++
      }
      for (f = lastStandby; f < standbyContent.length; f++) {
        o = standbyContent[f];
        b = loaders[o.type].preLoad(o);
        var g = $('<div class="slide"></div>').append(b);
        g.attr("id", "content-" + f);
        content[f] = o;
        g.appendTo($(".container"));
        console.log("Added " + f)
      }
      if (content.length > standbyContent.length) {
        for (var e = standbyContent.length; e < content.length; e++) {
          $("#content-" + e).remove();
          console.log("Removed " + e)
        }
        content.splice(n, content.length - standbyContent.length)
      }
      standby = false;
      console.log("Done adding");
      console.log(" ")
    }
  }
  if (!standby && cycles >= config.checkCycles) {
    cycles = 0;
    $.getJSON(config.contentURL, function (i) {
      console.log("Loaded standby");
      console.log(i);
      lastStandby = 0;
      standbyContent = i;
      standby = true
    })
  }
  var l = content[current];
  var m = $("#content-" + current);
  var d = l.duration ? l.duration : config.defaultDuration;
  d *= 1000;
  if (l.transition) {
    h = transitions[l.transition]
  } else {
    h = transitions[config.defaultTransition]
  }
  if (loaders[l.type].transitionIn) {
    loaders[l.type].transitionIn(l, m)
  }
  if (loaders[k.type].transitionOut) {
    loaders[k.type].transitionOut(k, c)
  }
  h.transition(m, c, d, function () {
    if (loaders[k.type].onHidden) {
      loaders[k.type].onHidden(k, c)
    }
    if (loaders[l.type].onShown) {
      loaders[l.type].onShown(l, m)
    }
    var p = config.defaultDelay;
    if (l.delay) {
      p = l.delay
    }
    if (n > 0 && standby) {
      if (n < standbyContent.length) {
        for (var q = lastStandby; q < n; q++) {
          var r = standbyContent[q];
          var t = loaders[r.type].preLoad(r);
          var j = $("#content-" + q);
          j.empty();
          j.append(t);
          content[q] = r;
          console.log("Replaced " + q);
          lastStandby++
        }
      }
    }
    p *= 1000;
    setTimeout(nextContent, p)
  })
}
$.getJSON(config.contentURL, function (e) {
  content = e;
  for (var b in content) {
    if (!content.hasOwnProperty(b)) {
      continue
    }
    var f = content[b];
    var d = loaders[f.type].preLoad(f);
    var a = $('<div class="slide"></div>').append(d);
    if (b != 0) {
      a.addClass("hidden")
    }
    a.attr("id", "content-" + b);
    a.appendTo($(".container"))
  }
  setTimeout(nextContent, (content[current].delay ? content[current].delay : config.defaultDelay) * 1000)
});
$(function () {
  $(document).idleTimer(3000);
  $(document).on("idle.idleTimer", function (b, a, c) {
    $("body").css("cursor", "none")
  });
  $(document).on("active.idleTimer", function (c, b, d, a) {
    $("body").css("cursor", "")
  })
});